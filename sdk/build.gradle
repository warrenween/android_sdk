apply plugin: 'com.android.library'

group = 'com.chartbeat.sdk'
version = '1.3.5'

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 100
        versionName "2.0"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


ext {
    bintrayRepo = 'maven'
    bintrayName = 'com.chartbeat.androidsdk'
    bintrayUserOrg = 'chartbeat-labs'

    publishedGroupId = 'com.chartbeat'
    libraryName = 'chartbeat-android-sdk'
    artifact = 'sdk'

    libraryDescription = 'Chartbeat Android SDK'

    siteUrl = 'https://github.com/chartbeat-labs/android_sdk'
    gitUrl = 'https://github.com/dcendents/android-maven-gradle-plugin.git'

    libraryVersion = '1.3.5'

    developerId = 'rmangi'
    developerName = 'Rick Mangi'
    developerEmail = 'rick@chartbeat.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

dependencies {
    // Comment out jar file compilations for jCenter or Maven distribution
    //compile fileTree(include: ['*.jar'], dir: 'libs')

    // Uncomment the following for jCenter or Maven distribution
    final RETROFIT_VERSION = '2.0.2'
    final OKHTTP_VERSION = '3.3.1'
    final RXJAVA_VERSION = '1.1.5'

    // Http networking
    compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION"
    compile "com.squareup.okhttp3:okhttp:$OKHTTP_VERSION"
    compile "com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION"

    // Async reactive extensions
    compile "io.reactivex:rxjava:$RXJAVA_VERSION"
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId  // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayUserOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
